[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "benchmark-analyzer"
version = "0.1.0"
description = "Framework for analyzing hardware/software benchmark results"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
authors = [{ name = "Your Name", email = "your.email@example.com" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # CLI framework
    "typer>=0.9.0",
    "rich>=13.0.0",

    # Database
    "sqlalchemy>=2.0.0",
    "pymysql>=1.0.0",
    "cryptography>=41.0.0", # For MySQL SSL connections

    # API framework
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pydantic>=2.0.0",
    "python-multipart>=0.0.6",   # For file uploads

    # Data processing
    "pyyaml>=6.0",
    "jsonschema>=4.0.0",
    "pandas>=2.0.0",

    # Utilities
    "python-dateutil>=2.8.0",
    "pathlib2>=2.3.0; python_version < '3.4'",

    # Dashboard
    "streamlit>=1.28.0",
    "plotly>=5.0.0",
    "altair>=5.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.24.0",                # For FastAPI testing
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "types-PyYAML>=6.0.0",
    "types-python-dateutil>=2.8.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.24.0",
]

[project.scripts]
benchmark-analyzer = "benchmark_analyzer.cli.main:app"
benchmark-api = "api.main:main"

[project.urls]
Homepage = "https://github.com/yourusername/benchmark-analyzer"
Repository = "https://github.com/yourusername/benchmark-analyzer"
Issues = "https://github.com/yourusername/benchmark-analyzer/issues"

# Ruff configuration
[tool.ruff]
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
]

line-length = 88
indent-width = 4
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "RUF", # ruff-specific rules
]

ignore = [
    "E501",    # line too long, handled by black
    "B008",    # do not perform function calls in argument defaults
    "TRY003",  # avoid specifying long messages outside the exception class
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]

fixable = ["ALL"]
unfixable = []

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["benchmark_analyzer", "api"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLR2004", "S101", "TID252"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["streamlit.*", "plotly.*", "altair.*", "pymysql.*"]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=benchmark_analyzer",
    "--cov=api",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["benchmark_analyzer", "api"]
omit = ["tests/*", "*/migrations/*", "*/venv/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

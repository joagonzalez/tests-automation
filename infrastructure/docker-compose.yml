# Docker Compose infrastructure for Benchmark Analyzer
# =====================================================

version: "3.8"

services:
  # MySQL Database
  mysql:
    image: mysql:8.0.39
    container_name: benchmark-analyzer-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-benchmark123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-perf_framework}
      MYSQL_USER: ${MYSQL_USER:-benchmark}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-benchmark123}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_0900_ai_ci
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_config:/etc/mysql/conf.d
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_0900_ai_ci
      --sql-mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
      --max-connections=200
      --innodb-buffer-pool-size=256M
      --innodb-redo-log-capacity=134217728
      --innodb-flush-log-at-trx-commit=1
      --sync-binlog=1
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MYSQL_ROOT_PASSWORD:-benchmark123}",
        ]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s
    networks:
      - benchmark-network
    labels:
      - "com.benchmark-analyzer.service=mysql"
      - "com.benchmark-analyzer.description=MySQL database for benchmark data"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.2.0
    container_name: benchmark-analyzer-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_USERS_ALLOW_ORG_CREATE: "false"
      GF_USERS_AUTO_ASSIGN_ORG: "true"
      GF_USERS_AUTO_ASSIGN_ORG_ROLE: "Viewer"
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel"
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: "/etc/grafana/provisioning/dashboards/benchmark-overview.json"
      GF_FEATURE_TOGGLES_ENABLE: "ngalert"
      GF_UNIFIED_ALERTING_ENABLED: "true"
      GF_ALERTING_ENABLED: "false"
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_config:/etc/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1",
        ]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s
    networks:
      - benchmark-network
    labels:
      - "com.benchmark-analyzer.service=grafana"
      - "com.benchmark-analyzer.description=Grafana dashboard for benchmark visualization"

  # Benchmark Analyzer API
  api:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile.api
      args:
        PYTHON_VERSION: 3.11
    container_name: benchmark-analyzer-api
    restart: unless-stopped
    environment:
      # Database configuration
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: ${MYSQL_USER:-benchmark}
      DB_PASSWORD: ${MYSQL_PASSWORD:-benchmark123}
      DB_NAME: ${MYSQL_DATABASE:-perf_framework}
      DB_DRIVER: pymysql

      # API configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      API_DEBUG: ${API_DEBUG:-false}
      API_RELOAD: ${API_RELOAD:-false}
      API_WORKERS: ${API_WORKERS:-1}
      API_LOG_LEVEL: ${API_LOG_LEVEL:-info}

      # CORS configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-*}

      # Security
      SECRET_KEY: ${SECRET_KEY:-your-very-secret-key-change-in-production}
      ENABLE_AUTH: ${ENABLE_AUTH:-false}

      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ENABLE_FILE_LOGGING: ${ENABLE_FILE_LOGGING:-false}

      # Upload configuration
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-104857600} # 100MB
      UPLOAD_DIR: /app/uploads
      TEMP_DIR: /app/temp
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - api_uploads:/app/uploads
      - api_temp:/app/temp
      - api_logs:/app/logs
      - ../benchmark_analyzer:/app/benchmark_analyzer:ro
      - ../api:/app/api:ro
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s
    networks:
      - benchmark-network
    labels:
      - "com.benchmark-analyzer.service=api"
      - "com.benchmark-analyzer.description=Benchmark Analyzer REST API"

# Networks
networks:
  benchmark-network:
    driver: bridge
    name: benchmark-analyzer-network
    labels:
      - "com.benchmark-analyzer.network=main"

# Volumes
volumes:
  # MySQL volumes
  mysql_data:
    driver: local
    name: benchmark-analyzer-mysql-data
    labels:
      - "com.benchmark-analyzer.volume=mysql-data"

  mysql_config:
    driver: local
    name: benchmark-analyzer-mysql-config
    labels:
      - "com.benchmark-analyzer.volume=mysql-config"

  # Grafana volumes
  grafana_data:
    driver: local
    name: benchmark-analyzer-grafana-data
    labels:
      - "com.benchmark-analyzer.volume=grafana-data"

  grafana_config:
    driver: local
    name: benchmark-analyzer-grafana-config
    labels:
      - "com.benchmark-analyzer.volume=grafana-config"

  # API volumes
  api_uploads:
    driver: local
    name: benchmark-analyzer-api-uploads
    labels:
      - "com.benchmark-analyzer.volume=api-uploads"

  api_temp:
    driver: local
    name: benchmark-analyzer-api-temp
    labels:
      - "com.benchmark-analyzer.volume=api-temp"

  api_logs:
    driver: local
    name: benchmark-analyzer-api-logs
    labels:
      - "com.benchmark-analyzer.volume=api-logs"
